document.addEventListener('DOMContentLoaded', () => {
    let searchAdaptive = () => {
        const header = document.querySelector('.header__container');
        const headerInner = document.querySelector('.header__search-inner');
        const headerSearchIcon = document.querySelector('.header__search-icon');
        const news = document.querySelector('.news');
    
        let check = 0;
    
        headerSearchIcon.addEventListener('click', () => {
            const headerHeight = header.offsetHeight;
            
            if (check === 0) {
                headerInner.style.maxHeight = (headerHeight+10) + 'px';
                news.style.paddingTop = headerHeight + 'px';
                check = 1;
            } else {
                headerInner.style.maxHeight = 0;
                news.style.paddingTop = 0;
                check = 0;
            }
        });
    }
    
    searchAdaptive();
    let burger = () => {
        const burgerBtn = document.querySelector('.header__burger');
        const nav = document.querySelector('.nav');
    
        burgerBtn.addEventListener('click', () => {
            burgerBtn.classList.toggle('_active');
            nav.classList.toggle('_active');
        })
    }
    burger();
    const tabTitle = document.querySelectorAll('.nav__menu-list li'),
    tabContent = document.querySelectorAll('.news');
    console.log(tabContent);
    
    tabTitle.forEach(item => {
        item.addEventListener('click', event => {
            // Получаем значение data-tab
            const tabsTitleTarget = event.target.getAttribute('data-tab');
    
            // Удаляем у всех табов кроме текущего класс _active-tab
            tabTitle.forEach(elem => {
                elem.classList.remove('_active-tab');
            })
    
            // Добавляем всем элементам с классом tab__content, класс hidden, всем кроме того который соответствует значением id со значение data-tab
            tabContent.forEach(elem => {
                elem.classList.add('hidden');
            })
    
            item.classList.add('_active-tab');
    
            // Сравниваем id и значение атрибута data-tab
            document.getElementById(tabsTitleTarget).classList.remove('hidden');
        })
    })
    const accordion = () => {
        const support = document.querySelector('.support');
        const accordions = document.querySelectorAll('.support__list');
        const sosElement = document.querySelector('.SOS');
    
        sosElement.addEventListener('click', () => {
            if (!support.classList.contains('hidden')) {
                accordions.forEach((accordion) => {
                    const supportBoxBtn = accordion.querySelector('.support__list-box');
                    const supportDescrBox = accordion.querySelector('.support__list-body');
                    const supportDescrHeight = accordion.querySelector('.support__list-descr').scrollHeight + 'px';
    
                    console.log(supportDescrHeight);
    
                    supportBoxBtn.addEventListener('click', () => {
                        const currentMaxHeight = supportDescrBox.style.maxHeight;
    
                        // Закрываем все аккордеоны
                        accordions.forEach((otherAccordion) => {
                            if (otherAccordion !== accordion) {
                                otherAccordion.classList.remove('_check');
                                otherAccordion.querySelector('.support__list-body').style.maxHeight = '0';
                            }
                        });
    
                        // Открываем или закрываем текущий аккордеон
                        if (currentMaxHeight === '' || currentMaxHeight === '0px') {
                            accordion.classList.add('_check');
                            supportDescrBox.style.maxHeight = supportDescrHeight;
                        } else {
                            accordion.classList.remove('_check');
                            supportDescrBox.style.maxHeight = '0';
                        }
                    });
                });
            }
        });
    };
    
    accordion();
    const modalAutorization = () => {
        const modal = document.querySelector('.modal'),
        modalClose = document.querySelector('.modal__close'),
        modalOpenBtn = document.querySelector('.header__autorization');
        
        modalOpenBtn.addEventListener('click', () => {
    
            modal.classList.add('_open');
            modalClose.addEventListener('click', () => {
                modal.classList.remove('_open');
            })
            
            if (modal.classList.contains('_open')) {
                const modalTabsBtn = document.querySelectorAll('.modal__tabs-btn');
                const modalForm = document.querySelectorAll('.modal__form');
    
                modalTabsBtn.forEach(item => {
                    item.addEventListener('click', event => {
                        const modalTabsTarget = event.target.getAttribute('data-tab-modal-btn');
    
                        modalTabsBtn.forEach(elem => {
                            elem.classList.remove('_active');
                        });
    
                        modalForm.forEach(elem => {
                            elem.classList.add('hidden');
                        })
    
                        item.classList.add('_active');
    
                        document.getElementById(modalTabsTarget).classList.remove('hidden');
                    });
                });
            }
        });
    }
    
    modalAutorization();
});